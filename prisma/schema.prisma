generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chapters {
  id                    BigInt                    @id @default(autoincrement())
  topic_id              BigInt
  parent_chapter_id     BigInt?
  chapter_number        String
  title                 String
  sub_title             String
  created_at            DateTime?                 @default(now()) @db.Timestamp(6)
  chapters              chapters?                 @relation("chaptersTochapters", fields: [parent_chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chapters_ibfk_2")
  SubChapters           chapters[]                @relation("chaptersTochapters")
  topics                topics                    @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chapters_ibfk_1")
  FileChapter           files?
  UserCompletedChapters user_completed_chapters[]
  user_progress         user_progress[]

  @@index([parent_chapter_id], map: "idx_chapters_parent_id")
  @@index([topic_id], map: "idx_chapters_topic_id")
}

model files {
  id         BigInt   @id @default(autoincrement())
  chapter_id BigInt   @unique
  file_name  String
  file_type  String
  chapters   chapters @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chapterFile")

  @@index([chapter_id], map: "idx_files_chapter_id")
}

model multiple_choice_options {
  id                           BigInt                         @id @default(autoincrement())
  objective_question_id        BigInt
  option_text                  String
  objective_questions          objective_questions            @relation(fields: [objective_question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "multiple_choice_options_ibfk_1")
  user_multiple_choice_answers user_multiple_choice_answers[]
}

model objective_questions {
  id                           BigInt                         @id @default(autoincrement())
  quiz_id                      BigInt
  question                     String
  question_type                String
  correct_answer               String?
  multiple_choice_options      multiple_choice_options[]
  quiz                         quiz                           @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "objective_questions_ibfk_1")
  user_multiple_choice_answers user_multiple_choice_answers[]
}

model quiz {
  id                     BigInt                   @id @default(autoincrement())
  topic_id               BigInt
  title                  String
  quiz_type              String                   @default("objective")
  max_attempts           Int?                     @default(3)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  objective_questions    objective_questions[]
  topics                 topics                   @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_ibfk_1")
  user_completed_quizzes user_completed_quizzes[]
  user_progress          user_progress[]
  user_quiz_attempts     user_quiz_attempts[]
}

model topics {
  id                      BigInt                    @id @default(autoincrement())
  topictitle              String?
  description             String?
  chapters                chapters[]
  quiz                    quiz[]
  user_completed_chapters user_completed_chapters[]
  user_completed_quizzes  user_completed_quizzes[]
  user_progress           user_progress[]
}

model user_completed_chapters {
  id                BigInt    @id @default(autoincrement())
  user_id           BigInt
  chapter_id        BigInt
  completion_status String?   @default("not_started")
  completed_at      DateTime? @default(now()) @db.Timestamp(6)
  topic_id          BigInt
  chapters          chapters  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_completed_chapters_ibfk_2")
  topics            topics    @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users     @relation(fields: [user_id], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "user_completed_chapters_ibfk_1")

  @@index([chapter_id], map: "idx_user_completed_chapters_chapter_id")
  @@index([user_id], map: "idx_user_completed_chapters_user_id")
}

model user_multiple_choice_answers {
  id                      BigInt                   @id @default(autoincrement())
  attempt_id              BigInt
  question_id             BigInt
  user_id                 BigInt
  user_selected_option_id BigInt?
  is_correct              Boolean?                 @default(false)
  attemptNumber           Int?                     @db.SmallInt
  user_quiz_attempts      user_quiz_attempts       @relation(fields: [attempt_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_multiple_choice_answers_ibfk_1")
  objective_questions     objective_questions      @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_multiple_choice_answers_ibfk_2")
  users                   users                    @relation(fields: [user_id], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "user_multiple_choice_answers_ibfk_4")
  multiple_choice_options multiple_choice_options? @relation(fields: [user_selected_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_multiple_choice_answers_ibfk_3")

  @@index([attempt_id], map: "idx_user_multiple_choice_answers_attempt_id")
  @@index([question_id], map: "idx_user_multiple_choice_answers_question_id")
  @@index([user_selected_option_id], map: "idx_user_multiple_choice_answers_selected_option_id")
  @@index([user_id], map: "idx_user_multiple_choice_answers_user_id")
}

model user_progress {
  id                BigInt    @id @default(autoincrement())
  user_id           BigInt    @unique(map: "unq_userid")
  completed_lessons Int?      @default(0)
  completed_quizzes Int?      @default(0)
  curr_chap_id      BigInt?   @default(1)
  curr_topic_id     BigInt?   @default(1)
  curr_quiz_id      BigInt?   @default(1)
  chapters          chapters? @relation(fields: [curr_chap_id], references: [id], onDelete: SetDefault, onUpdate: NoAction)
  quiz              quiz?     @relation(fields: [curr_quiz_id], references: [id], onDelete: SetDefault, onUpdate: NoAction)
  topics            topics?   @relation(fields: [curr_topic_id], references: [id], onDelete: SetDefault, onUpdate: NoAction)
  users             users     @relation(fields: [user_id], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "user_progress_ibfk_1")

  @@index([user_id], map: "idx_user_progress_user_id")
}

model user_quiz_attempts {
  id                           BigInt                         @id @default(autoincrement())
  user_id                      BigInt
  quiz_id                      BigInt
  attempt_count                Int?                           @default(0)
  score                        Int?                           @default(0)
  completed_at                 DateTime?                      @db.Timestamp(6)
  start_time                   DateTime?                      @db.Timestamp(6)
  timeTaken                    DateTime?                      @db.Time(6)
  user_multiple_choice_answers user_multiple_choice_answers[]
  quiz                         quiz                           @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_quiz_attempts_ibfk_2")
  users                        users                          @relation(fields: [user_id], references: [userid], onDelete: Cascade, onUpdate: NoAction)

  @@index([quiz_id], map: "idx_user_quiz_attempts_quiz_id")
  @@index([user_id], map: "idx_user_quiz_attempts_user_id")
}

model user_refresh_tokens {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  token      String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  expires_at DateTime  @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "user_refresh_tokens_ibfk_1")

  @@index([user_id], map: "idx_user_refresh_tokens_user_id")
}

model users {
  id                           BigInt                         @id @default(autoincrement())
  userid                       BigInt                         @unique
  username                     String
  email                        String                         @unique
  password                     String
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  role                         String                         @default("user")
  user_completed_chapters      user_completed_chapters[]
  user_completed_quizzes       user_completed_quizzes[]
  user_multiple_choice_answers user_multiple_choice_answers[]
  user_progress                user_progress?
  user_quiz_attempts           user_quiz_attempts[]
  user_refresh_tokens          user_refresh_tokens[]
}

model user_completed_quizzes {
  id           Int      @id @default(autoincrement())
  quiz_id      BigInt
  user_id      BigInt
  completed_at DateTime @db.Timestamp(6)
  topic_id     BigInt
  quiz         quiz     @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  topics       topics   @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users    @relation(fields: [user_id], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model user_otp {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt   @unique
  created_at DateTime @db.Time(6)
  expires_at DateTime @db.Time(6)
  otp        String?
  email      String   @unique @db.VarChar(255)
}
